variables:
  cmEnvironmentConnectionName: 'CRM-NPD-ServiceConnection' ##'CRM-NPD-ServiceConnection' ##'DevConnection'
  testEnvironmentConnectionName: 'CRM-TEST-ServiceConnection' ##'TestConnection'
  solutionNameD365Master: "D365Master"
  solutionNamePortalCli: "PortalCli"
  notifyUsersEmail: '["vaibhav88sharma@hotmail.com"]'

trigger: none

pool:
  vmImage: windows-latest
  demands:
  - npm
  - msbuild
  - visualstudio

parameters:
  - name: "comments"
    displayName: "Check-in Comments"
    type: string
  - name: "d365masterData"
    displayName: "D365 Master Data Export"
    type: boolean
    default: false
  - name: "portalcliData"
    displayName: "Portal Cli Data Export"
    type: boolean
    default: false
stages:
#######################################
#
# - Build Stage
#
#######################################

- stage: ExportData
  displayName: "Export Data"
  variables:
  - template: Templates/Variables.yml
  jobs:
   - job: Export_Data
     displayName: "Export Data from Source Env"
     steps:
     # checkout: self => This specifies that the pipeline should checkout the source code from the same repository that the pipeline is defined in.
     # fetchDepth: 1 => This tells the pipeline to fetch only the latest changeset from the repository.
     # persistCredentials: True => This ensures that the credentials used to trigger the pipeline are persisted and used for subsequent steps.
      - checkout: self
        fetchDepth: 0
        fetchTags: true
        persistCredentials: true
        displayName: "Checkout Self"

        
      - task: CmdLine@2
        displayName: "Git Checkout Repo - $(Build.SourceBranchName)"
        inputs:
          script: |
            echo commit changes      
            git config user.name "$(Build.RequestedFor)"
            git config user.email "$(Build.RequestedForEmail)"
            echo git version ---
            git version 
            echo cd System.DefaultWorkingDirectory -- $(System.DefaultWorkingDirectory) ---
            echo cd Build.SourcesDirectory -- $(Build.SourcesDirectory) ---
            git checkout $(Build.SourceBranchName) --progress 
    
      - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2
      #- task: PowerPlatformToolInstaller@2
        displayName: "Install Power Platform Tool"
        inputs:
          DefaultVersion: true

      - template : Templates/ExportData.yml
        parameters:
          d365masterData: ${{ parameters.d365masterData }}
          portalcliData: ${{ parameters.portalcliData }}
          # environmentconnection: $(serviceConnectionName_dev)
          environmentconnection: $(cmEnvironmentConnectionName)
          environmentname: 'Dev'
          solutionNameD365Master:  $(solutionName_D365Master)
          solutionNamePortalCli: $(solutionName_PortalCli)
          # solutionNameD365Master: $(solutionNameD365Master)
          # solutionNamePortalCli: $(solutionNamePortalCli)
          serviceConnectionUrl:  $(serviceConnectionUrl_dev)
          schemaFile: $(data_export_schemaFile)
          dataExtraxtedZipFile: $(data_export_extraxtedZip)
          dataFile: $(drop_file_location)
          # dataFile: $(data_export_dataFile)

      - task: CmdLine@2
        displayName: "Git Push into Repo - $(Build.SourceBranchName)"
        inputs:
          script: |
            git add --all
            git commit -m "${{ parameters.comments }}"
            echo push code to repo
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
            

#######################################
#
# - Import Data into Target Stage
#
#######################################

- stage: ImportData
  displayName: "Import Data"
  variables:
  - template: Templates/Variables.yml
  dependsOn: ExportData
  jobs:
  - deployment: Import_Data
    displayName: "Import Data into Target"
    environment: 'Test' 
    strategy:
      runOnce:
        deploy:
          steps:
           - task: PowerPlatformToolInstaller@2
             displayName: "Install Power Platform Tool"
             inputs:
                DefaultVersion: true                     
           - template : Templates/ImportData.yml
             parameters:
               d365masterData: ${{ parameters.d365masterData }}
               portalcliData: ${{ parameters.portalcliData }}
               environmentconnection: $(testEnvironmentConnectionName)
               # environmentconnection: $(serviceConnectionName_test)
               environmentname: 'Test'
               solutionNameD365Master: $(solutionNameD365Master)
               solutionNamePortalCli: $(solutionNamePortalCli)
               droppath: '$(Pipeline.Workspace)\SolutionDrop'
               #droppath: '$(Build.StagingDirectory)\SolutionDrop'
               #droppath: '$(Build.SourcesDirectory)\SolutionsZipFiles\'
               serviceConnectionUrl:  $(serviceConnectionUrl_test)
               dataFile: $(data_import_dataFile)
